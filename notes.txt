 Vue 3 notlari

 ++- prop parent componentten, child componente veri gonderilirken kullanilir.
 ++- Parent component te :gidenPropAdi="veri" gonderilen veri(mesaj, obje, vs), child componentte prop alanina geldigi tur vs yazilir

 Episode 1
 1- v-model="anyName" : herhangi bir degere bagliyoruz.

 2- data()
    {
        return {
            greeting: "Hello World"
        };
    }, : ?degiskenlerimizi burada belirliyoruz

 3- mounted()
    {
        setTimeout(() => {
            this.greeting = "Changed!";
        }, 3000);
    } : Mounted sayfa acilir acilmaz ?calisicak

 4- <p>
        {{ greeting }} {{ greeting.length === 0 ? "Bir deger giriniz" : ` : length (${greeting.length})`}}
    </p> : seklinde htmlde kullaniriz


 Episode 2

 5- methods:
    {
        changeColor() {
            this.active = !this.active;
        }
    } : methodlar methods arasina yazilir

 6- v-bind:class = :class, v-on:click = @click

 7- <button :class="active ? 'text-red' : 'text-green'" @click="changeColor">Click me</button> : ornek kullanimi


 Episode 3

 8- v-show="conditions" : d-none yapar, v-if="kosul" : saglanmadigi surece yazmaz

 9- computed : bagli oldugu data da degisiklik eydana gelirse calisir, methods her zaman calisir

 10- <li :key="assignment.id" v-for="assignment in completedAssignments">
        <label>
            {{ assignment.name }}
            <input type="checkbox" v-model="assignment.complete">
        </label>
    </li> : v-for kullanimi

 11- <script>
         const app = {
             data() {
                 return {
                     assignments: [
                         {name: 'Finish Project', complete: false, id: 1},
                         {name: 'Read book', complete: false, id: 2},
                         {name: 'Turn in homework', complete: false, id: 3},
                     ]
                 };
             },

             computed: {
                 inProgressAssignments() {
                     return this.assignments.filter(assignment => !assignment.complete);
                 },
                 completedAssignments() {
                     return this.assignments.filter(assignment => assignment.complete);
                 }
             }
         };
         Vue.createApp(app).mount("#app");
     </script>


 Episode 4

 12- let app = {
          components: {
              'app-button': {
                  template: `
                    <button
                        class="bg-gray-200 hover:bg-gray-400 hover:text-white border rounded px-5 py-2 disabled:cursor-not-allowed"
                        :disabled="processing">
                      <slot/>
                    </button>
                  `,

                  data() {
                      return {
                          processing: true
                      };
                  }
              },

          }
      };

      Vue.createApp(app).mount("#app"); : component tanimi, template icerisi dondurulur. Slot cagrildiginda dinamiklesitir

 13- <app-button>Submit</app-button> : component cagirimi, Submit = <slot/>


 Episode 5

 14- export default {
         template: `
           <button
               class="bg-gray-200 hover:bg-gray-400 hover:text-white border rounded px-5 py-2 disabled:cursor-not-allowed"
               :disabled="processing">
             <slot/>
           </button>
         `,

         data() {
             return {
                 processing: true
             };
         }
     } : externel componenti olusturduk

 15- <script type="module">
         import AppButton from "./src/components/AppButton.js";

         let app = {
             components: {
                 'app-button': AppButton
             }
         };

         Vue.createApp(app).mount("#app");
     </script> : type module dedik ve import ettik. components bolumunde importu atadik


 Episode 6

 16- props: {
         type: {
             type: String,
             default: 'primary'
         },
         processing: {
             type: Boolean,
             default: false
         }
     } : prop u bu sekilde tanimlayabilirz type ve dault degerleri verilebilinir.

 17- <button
           :class="{
             'hover:text-white border rounded px-5 py-2 disabled:cursor-not-allowed':true,
             'bg-blue-600 hover:bg-blue-700': type === 'primary',
             'bg-purple-200 hover:bg-purple-400': type === 'secondary',
             'bg-gray-200 hover:bg-gray-400': type === 'muted',
             'is-loading' : processing
           }"
           :disabled="processing">
         <slot/>
     </button> : Burada classlari : ile if kosuluna baglayabiliriz

 18- <app-button :processing="true">Submit</app-button> : ornek :type attr olarak gecilmedigi icin default degerubu propstan almakta


 Episode 7

 19- <script type="module">
         import App from "./src/components/App.js";

         Vue.createApp(App).mount("#app");
     </script> : indexte app componetini cagirdik.

 20- import Assignments from "./Assignments.js";

     export default {
         components: {Assignments},

         template: `
           <Assignments/>
         `,
     } : burada da assignemnts componentini cagirdik.

 21- Assignments componentinde listi cagirdik ve liste props gonderdik.

 22- AssignmentList componentinde assignment componentini cagirdik ve ona da props gonderdik.

 23- Assignment componentinde ise veriyi bastirdik.

 24- Propslar ilgili componentte turu belirtilmelidir.


 Episode 8

 25- <form @submit.prevent="add">
         <div class="border border-gray-600 text-black">
             <input v-model="newAssignment" type="text" placeholder="New assignment..." class="p-2 focus:outline" />
             <button type="submit" class="bg-gray-300 text-white p-2 border-l hover:bg-gray-400 hover:text-black">Add</button>
         </div>
     </form> : form gonderme islemi v-model ile newAssignment a bagladik

 26- data() {
         return {
             assignments: [
                 {name: 'Finish Project', complete: false, id: 1},
                 {name: 'Read book', complete: false, id: 2},
                 {name: 'Turn in homework', complete: false, id: 3},
             ],

             newAssignment: ''
         }
     }, : return icerisnde newAssignment tanimladik ve formda inputa bagladik

 27- methods: {
        add() {
            this.assignments.unshift({
                name: this.newAssignment,
                complete: false,
                id: this.assignments.length + 1
            });
            this.newAssignment = '';
        }
     } : butona tiklanildiginda prevent yapip add fonk da assignmenta yeni deger atadik name i newAssignment tan aldik


 Episode 9

 28- <assignment-create @okan="add"></assignment-create> : componenti olusturduk. ve custom v-on tanimladik

 29- methods: {
         add(name) {
             this.assignments.unshift({
                 name: name,
                 complete: false,
                 id: this.assignments.length + 1
             });
         }
     } : child a name olarak atadik

 30- methods: {
         add() {
             this.$emit('okan', this.newAssignment);
             this.newAssignment = '';
         }
     } : $emit ile dinleyecek event adini verip name olarak newAssignment i verdik


 Episode 10

 31- data() {
         return {
             currentTag: 'all'
         }
     }, : currentTag defaul olarak all atadik

 32- computed: {
         filteredAssignments() {
             if (this.currentTag === 'all') return this.assignments
             return this.assignments.filter(a => a.tag === this.currentTag);
         },

         tags() {
             return ['all', ...new Set(this.assignments.map(a => a.tag))];
         }
     }, : assignment larda donerken kosula bagladik

 33- <div class="flex gap-2">
       <button
           @click="currentTag = tag"
           v-for="tag in tags"
           class="border rounded px-1 py-px text-xs"
           :class="{
               'border-blue-500 text-blue-500': tag === currentTag
           }"
       > {{ tag }}
       </button>
     </div> : Taglara donup button value olarak yazdik. Tiklanildiginda mevcut taga donerkeki tagi atadik
              ve mevcut tag donerken ki tagsa :class larini verdik


 Episode 11

 34- <assignment-tags
         :initial-tags="assignments.map(a=>a.tag)"
         :current-tag="currentTag"
         @change="currentTag = $event"
     /> : component olusturduk ve inital prop u ile taglari, current ile mebcut tag i componente ginderdik.
          @change ise $emit olarak gonderdik. $event gonderilen tag a karsilik gelmekte

 35- template: `
       <div class="flex gap-2">
         <button
             @click="$emit('change', tag)"
             v-for="tag in tags"
             class="border rounded px-1 py-px text-xs"
             :class="{
                   'border-blue-500 text-blue-500': tag === currentTag
               }"
         > {{ tag }}
         </button>
       </div>
     `, : ass-tags componenti

 36- props: {
         initialTags: Array,
         currentTag: String
     },


     computed: {
         tags() {
             return ['all', ...new Set(this.initialTags)];
         }
     }  : props ve all + initial taglar


 Episode 12

 37- v-model:currentTag="currentTag" : v-model:name ile istegimiz adla propsu hem de value yu yakalayabiliriz.

 38- props: {
         initialTags: Array,
         currentTag: String
     }, : v-modal:currentTag propsunu cekiyoruz

 38- @click="$emit('update:currentTag', tag)" : update:currentTag ile propsu cekip kullaniyoruz


 Episode 13

 39- npm i json-server --save-dev : ile fake api yi kurduk

 40- {
       "assignments": [
         {
           "name": "Finish Project",
           "complete": false,
           "id": 1,
           "tag": "math"
         },...
       } : db.json icerisine ornek data atadik

 41- data() {
         return {
             assignments: [],
         }
     }, : baslangicta bos dizi olarak tanimladik

 42- created() {
         fetch('http://localhost:3001/assignments')
             .then(response => response.json())
             .then(assignments => {
                 this.assignments = assignments;
             });
     }, : daha sonra created alanina fetch ile cekip assigment a atadik

 43- npx json-server db.json -p 3001 : ile fake db yi calistirdik


 Episode 14

 44- {
       "scripts": {
         "start": "npx serve & npx json-server db.json -p 3001"
       },
       "devDependencies": {
         "json-server": "^1.0.0-beta.2"
       }
     }
 : surekli "npx serve" ve "npx serve & npx json-server db.json -p 3001" komutlarini calistirmamak icin package.json a ekledik

 45- <slot></slot> : ile istedigimiz contenti yazabiliriz. Assignment, AssignmentList ve AssignmentCreate componentlerine bak


 Episode 15

 46- <footer v-if="$slots.footer" class="border-gray-600 border-t mt-4 pt-4">
       <slot name="footer"></slot>
     </footer> : slot acip name veriyoruz. name verilmezse default anlamina gelir.

 47- v-if="$slots.{slotName}" : slota verilen name ile kontrol ediyoruz

 48- <panel v-show="assignments.length" class="w-60" id="my-panel">
         <template #heading>
           Header is here
         </template>
      </panel> : kullanimi ise componenti cagirip icersinde template taglari icerisinde component te verilen name ile eslestiriyoruz.


 Episode 16

 49- npm init vue@lates : komutu ile projeyi kuruyoruz. Proje name veriyoruz, ts:no, jsx:no, Vue Router:yes, Pinia:fornowNO, Vitest testing:no, end-to-end test:no, ESLint:yes, Prettier:yes

 50- cd pr-name, npm i, npm run lint, npm run dev : komutlarini calistiriyoruz


 Episode 17

 51- {
       "compilerOptions": {
         "paths": {
           "@/*": ["./src/*"]
         }
       },
       "exclude": ["node_modules", "dist"]
     } : projede egerki jsconfig.json dosyasi yoksa olustur ve bu kodlari yapistir. Amac ise @ alias i ile direkt src nin altini gormek

 52- <RouterLink to="/">Home</RouterLink> : router link ler sayfa yenilenmeden getirilmesini saglar. href alanini to yapiyoruz

 53- Bunun icin <RouterView/> componentini cagirmak gerek. Bu component sayesinde hangi sayfadaysa onun componenti cagirliyor

 54- <TheWelcome /> || <the-welcome /> : seklinde de componentler kullanabilinir. Common ise ilk sekil


 Episode 18

 55- <script setup></script> : bu (compositon) kullanimda components, data, props, methods, computes vs vs diger(options) sekle gore farkli tanimlaniyorlar

 56- <script setup>
         import TheWelcome from '../components/TheWelcome.vue'
         import {ref} from "vue";

         let message = ref('Hello World');

         let doSomething = () => {
           alert('got it');
         };

     </script> : data, ve methods bu sekilde tanimlanir

 57- {{ message }}

     <p>
       <input v-model="message" type="text"/>
     </p>
     <p>
       <button @click="doSomething">Click HERE</button>
     </p> : bu sekilde de bind ve event tetiklettik

 58- export default defineConfig({
         plugins: [
             vue({
                 reactivityTransform: true,
             }),
         ],
         resolve: {
             alias: {
                 '@': fileURLToPath(new URL('./src', import.meta.url))
             }
         }
     }) : vue eger setup li sekilde kullanilacaksa ref ile tanimlanan degiskene surekli value yazmaktansa reactivityTransform: true veririz

 59- ref gibi lerini import edip kullanmaktansa $ref seklinde de kullanabiliriz. $emit() gibi *bende calismadi bu son 2 si


 Episode 19

 60- npm i sweetalert --save-dev : ile paketi kurduk

 61- src/composables/useFlash.js : composables ad standarti useName.js seklinde. dosyayi olusturduk

 62- import swal from "sweetalert";

     export function useFlash() {
         function flash(title, message, level = "success") {
             return swal(title, message, level);
         }

         return {flash};
     } : export fn dosyaAdi, barinacak fonksiyonlar ve son olarak return obje seklinde dondurduk

 63- <script setup>

     import {useFlash} from "@/composables/useFlash.js";

     let {flash} = useFlash();

     </script> : setup ta bu sekilde import edip degiskene atayip kullanabilir halde.\

 64- <button @click="flash('ABOUT','It Works on the about page','info')">Click Me</button> : son olarak cagirdik ilgili fonksiyonu


 Episode 20

 65- useStorage composables ini olusturup home view dan local storage a veri depolattik

 66- import {useStorage} from "@/composables/useStorage.js";

     let food = useStorage('food'); :

     <p>
       What is your favorite food ? <input v-model="food" type="text">
     </p> : import edip v model ile bagliyoruz ve yazilan fonk gore cagiriyoruz

 67- import {ref, watch} from "vue";

     export function useStorage(key, val = null) {
         let storedVal = read();

         if (storedVal) {
             val = ref(storedVal);
         } else {
             val = ref(val);
             write();
         }


         watch(val, write, {deep: true});

         function read() {
             return JSON.parse(localStorage.getItem(key));
         }

         function write() {
             if (val.value === null || val.value === '') {
                 localStorage.removeItem(key)
             } else {

                 localStorage.setItem(key, JSON.stringify(val.value));
             }
         }

         return val;
     } : ornek useStorage kodu


 Episode 21

 68- let textarea = ref(null);
     <textarea ref="textarea" style="width: 100%; height: 300px" @keydown.tab.prevent="onTabPress">Hi there</textarea> : ref ile birbirine baglayabiirim d.queryselector gibi

 69-  <TabbableTextarea v-model="comment" style="width: 100%; height: 300px"/> : burada v-model prop olarak gonderebiliriz child componentte prop : modelValue: String seklinde alabilir
      eger ki custom olarak gondereceksen v-model:customName="comment" seklinde gonderip propu o sekilde yakalayabiliriz

 70- let comment = ref('test val'); composition api da tanimla yapmak gerekir

 71- <script setup>

     defineProps({
       modelValue: String
     });

     let emitFuncCustom = defineEmits(['update:modelValue']);

     function onTabPress(e) {
       let textarea = e.target;

       let val = textarea.value,
           start = textarea.selectionStart,
           end = textarea.selectionEnd;

       textarea.value = val.substring(0, start) + "\t" + val.substring(end);

       textarea.selectionStart = textarea.selectionEnd = start + 1;

     }

     </script>


     <template>
       <textarea
           @keyup="emitFuncCustom('update:modelValue', $event.target.value)"
           v-text="modelValue"
           @keydown.tab.prevent="onTabPress"
       />
     </template> : ornek prop emit kullanimi


 Episode 22

 72- <Quiz :quiz="{name: 'First Quiz', questions:[] }"/> : quiz componentine prop olarak quiz gonderdik.

 73- import {provide} from "vue";

     let props = defineProps({quiz: Object});

     provide('quiz', props.quiz); : provide ile quiz i proptan okuyup tanimlattik

 74- import {inject} from "vue";

     let quiz = inject('quiz');

     <h5>{{ quiz.name }}</h5> : inject ile quiz i aldik ve name degerine eristik.

 75- Yapilan islem provide ve inject ile dependency injection islemini gerceklestirmek. Surekli her componente prop olarak almamak


 Episode 23

 76- import {reactive} from "vue";

     export let state = reactive({
         name: 'My Second Quiz',
         questions: []
     }); : reactive({}) ozellikle objeler icin ref() gibi kullanilir.

 77- Bu durumda provide inject gibi kullanilabilinir bu yol


